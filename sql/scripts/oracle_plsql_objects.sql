-- Oracle PL/SQL Objects for Fase 6
-- Run this script in your Oracle schema (same user configured in ORACLE_USER)

-- 1) Optional helper table to persist alerts
BEGIN
  EXECUTE IMMEDIATE 'CREATE TABLE TB_ALERTA (
    ID_ALERTA       NUMBER(10)      GENERATED BY DEFAULT AS IDENTITY,
    ID_PAGAMENTO    NUMBER(10)      NOT NULL,
    VALOR           NUMBER(10,2)    NOT NULL,
    MENSAGEM        VARCHAR2(400)   NOT NULL,
    DATA_ALERTA     DATE            DEFAULT SYSDATE NOT NULL,
    CONSTRAINT PK_TB_ALERTA PRIMARY KEY (ID_ALERTA),
    CONSTRAINT FK_ALERTA_PAGAMENTO FOREIGN KEY (ID_PAGAMENTO) REFERENCES TB_PAGAMENTO(ID_PAGAMENTO)
  )';
EXCEPTION WHEN OTHERS THEN
  IF SQLCODE = -955 THEN NULL; ELSE RAISE; END IF; -- ORA-00955: name is already used by an existing object
END;
/

-- 2) Function: ticket médio por cliente
CREATE OR REPLACE FUNCTION FN_TICKET_MEDIO_CLIENTE (
  p_id_cliente IN NUMBER
) RETURN NUMBER IS
  v_media NUMBER(12,2);
BEGIN
  SELECT NVL(AVG(valor_pagamento), 0)
    INTO v_media
    FROM tb_pagamento
   WHERE id_cliente = p_id_cliente;
  RETURN v_media;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 0;
  WHEN OTHERS THEN
    RETURN 0; -- simples: evita propagar erro
END FN_TICKET_MEDIO_CLIENTE;
/

-- 3) Function: descrição formatada do pagamento
CREATE OR REPLACE FUNCTION FN_DESCRICAO_PAGAMENTO (
  p_id_pagamento IN NUMBER
) RETURN VARCHAR2 IS
  v_texto VARCHAR2(1000);
  v_nome  VARCHAR2(200);
  v_tipo  VARCHAR2(20);
  v_num   VARCHAR2(20);
  v_valor NUMBER(10,2);
  v_data  DATE;
BEGIN
  SELECT cli.nome_cliente,
         car.tipo_cartao,
         car.numero_cartao,
         pag.valor_pagamento,
         pag.data_pagamento
    INTO v_nome, v_tipo, v_num, v_valor, v_data
    FROM tb_pagamento pag
    JOIN tb_cliente  cli ON cli.id_cliente = pag.id_cliente
    JOIN tb_cartao   car ON car.id_cartao  = pag.id_cartao
   WHERE pag.id_pagamento = p_id_pagamento;

  v_texto := 'Cliente: '||v_nome||' | Cartão: ****'||SUBSTR(v_num, -4)||' ('||v_tipo||')' ||
             ' | Valor: R$ '||TO_CHAR(v_valor, 'FM999G999D00', 'NLS_NUMERIC_CHARACTERS=,.')||
             ' | Data: '||TO_CHAR(v_data, 'DD/MM/YYYY');
  RETURN v_texto;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'Pagamento não encontrado';
  WHEN OTHERS THEN
    RETURN 'Erro ao formatar pagamento: '||SQLERRM;
END FN_DESCRICAO_PAGAMENTO;
/

-- 4) Procedure: registra alertas para pagamentos acima de um limite
CREATE OR REPLACE PROCEDURE PRC_REGISTRAR_ALERTAS (
  p_limite IN NUMBER,
  o_qtd    OUT NUMBER
) AS
BEGIN
  o_qtd := 0;
  FOR r IN (
    SELECT id_pagamento, valor_pagamento
      FROM tb_pagamento
     WHERE valor_pagamento > p_limite
  ) LOOP
    INSERT INTO tb_alerta(id_pagamento, valor, mensagem)
      VALUES (r.id_pagamento, r.valor_pagamento,
              'Pagamento acima do limite: R$ '||TO_CHAR(r.valor_pagamento, 'FM999G999D00', 'NLS_NUMERIC_CHARACTERS=,.'));
    o_qtd := o_qtd + 1;
  END LOOP;
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
END PRC_REGISTRAR_ALERTAS;
/

-- 5) Procedure: relatório de consumo por mês para um cliente (OUT cursor)
CREATE OR REPLACE PROCEDURE PRC_RELATORIO_CONSUMO_CLIENTE (
  p_id_cliente IN NUMBER,
  o_cursor     OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN o_cursor FOR
    SELECT TO_CHAR(data_pagamento, 'YYYY-MM') AS mes,
           COUNT(*) AS qtd,
           SUM(valor_pagamento) AS total
      FROM tb_pagamento
     WHERE id_cliente = p_id_cliente
     GROUP BY TO_CHAR(data_pagamento, 'YYYY-MM')
     ORDER BY mes;
END PRC_RELATORIO_CONSUMO_CLIENTE;
/

-- 6) Procedure: lista alertas criados (OUT cursor)
CREATE OR REPLACE PROCEDURE PRC_LISTAR_ALERTAS (
  o_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN o_cursor FOR
    SELECT a.id_alerta, a.id_pagamento, a.valor, a.mensagem, a.data_alerta
      FROM tb_alerta a
     ORDER BY a.data_alerta DESC, a.id_alerta DESC;
END PRC_LISTAR_ALERTAS;
/
